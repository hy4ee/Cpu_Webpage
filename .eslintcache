[{"C:\\취준\\리액트연습\\cpu\\src\\index.jsx":"1","C:\\취준\\리액트연습\\cpu\\src\\BoardDetail.jsx":"2","C:\\취준\\리액트연습\\cpu\\src\\BoardForm.jsx":"3","C:\\취준\\리액트연습\\cpu\\src\\BoardWriteForm.jsx":"4","C:\\취준\\리액트연습\\cpu\\src\\Home.jsx":"5","C:\\취준\\리액트연습\\cpu\\src\\LoginForm.jsx":"6","C:\\취준\\리액트연습\\cpu\\src\\MypageForm.jsx":"7","C:\\취준\\리액트연습\\cpu\\src\\Header.jsx":"8","C:\\취준\\리액트연습\\cpu\\src\\Body.jsx":"9","C:\\취준\\리액트연습\\cpu\\src\\Footer.jsx":"10","C:\\취준\\리액트연습\\cpu\\src\\App.jsx":"11","C:\\취준\\리액트연습\\cpu\\src\\BoardAllForm.jsx":"12"},{"size":261,"mtime":1613369387279,"results":"13","hashOfConfig":"14"},{"size":3268,"mtime":1613369525717,"results":"15","hashOfConfig":"14"},{"size":2739,"mtime":1613372170177,"results":"16","hashOfConfig":"14"},{"size":2886,"mtime":1613372293730,"results":"17","hashOfConfig":"14"},{"size":645,"mtime":1613366031860,"results":"18","hashOfConfig":"14"},{"size":6985,"mtime":1612971120494,"results":"19","hashOfConfig":"14"},{"size":1369,"mtime":1612967641814,"results":"20","hashOfConfig":"14"},{"size":2868,"mtime":1613372374384,"results":"21","hashOfConfig":"14"},{"size":804,"mtime":1613371361533,"results":"22","hashOfConfig":"14"},{"size":158,"mtime":1613365947661,"results":"23","hashOfConfig":"14"},{"size":987,"mtime":1613371847461,"results":"24","hashOfConfig":"14"},{"size":2758,"mtime":1613372333454,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"qy6hmf",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"29"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"C:\\취준\\리액트연습\\cpu\\src\\index.jsx",["59"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n <App/>,\r\n  document.querySelector(\"#container\")\r\n);\r\n\r\n",["60","61"],"C:\\취준\\리액트연습\\cpu\\src\\BoardDetail.jsx",[],"C:\\취준\\리액트연습\\cpu\\src\\BoardForm.jsx",[],"C:\\취준\\리액트연습\\cpu\\src\\BoardWriteForm.jsx",[],"C:\\취준\\리액트연습\\cpu\\src\\Home.jsx",["62","63","64","65","66","67","68","69"],"import React, { Component } from \"react\";\r\nimport { Navbar, Button, Image } from \"react-bootstrap\";\r\nimport { NavLink, Route } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport $ from \"jquery\";\r\nimport {} from \"jquery.cookie\";\r\nimport LoginForm from \"./LoginForm\";\r\naxios.defaults.withCredentials = true;\r\nconst headers = { withCredentials: true };\r\n\r\nclass Home extends Component {\r\n  \r\n    \r\n  render() {\r\n   \r\n    return (\r\n      <>\r\n        <h1>\r\n            Welcome to visit our website~~~!!!<br/>\r\n            If you want to, please join our homepage!\r\n        </h1>\r\n        \r\n      </> \r\n    );\r\n  }\r\n\r\n}\r\nexport default Home;",["70","71"],"C:\\취준\\리액트연습\\cpu\\src\\LoginForm.jsx",["72","73"],"\r\nimport React, {Component} from \"react\";\r\nimport {Route} from 'react-router-dom';\r\nimport Home from \"./Home\";\r\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport axios from \"axios\"; //axios : http client 라이브러리, 비동기방식으로 http 데이터 요청을 할때 사용 (http request대신 사용)\r\nimport $ from \"jquery\";\r\nimport {} from \"jquery.cookie\"; //로그인, 로그아웃 시 사용\r\naxios.defaults.withCredentials = true; //AJAX통신 시 node.js 서버에 통신호출하여 DB에서 데이터를 가져옴. url 앞의주소가 같아야함.\r\nconst headers = {withCredentials: true};\r\n\r\nclass LoginForm extends Component {\r\n    componentDidMount() {\r\n      loadReCaptcha(\"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\");\r\n    }\r\n  \r\n    verifyCallback = recaptchaToken => {\r\n      // Here you will get the final recaptchaToken!!!\r\n      console.log(recaptchaToken, \"<= your recaptcha token\");\r\n    };\r\n  \r\n    join = () => {\r\n      const joinEmail = this.joinEmail.value;\r\n      const joinName = this.joinName.value;\r\n      const joinPw = this.joinPw.value;\r\n      const regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n      const regExp2 = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,16}$/;\r\n      if (joinEmail === \"\" || joinEmail === undefined) {\r\n        alert(\"이메일 주소를 입력해주세요.\");\r\n        this.joinEmail.focus();\r\n        return;\r\n      } else if (\r\n        joinEmail.match(regExp) === null ||\r\n        joinEmail.match(regExp) === undefined\r\n      ) {\r\n        alert(\"이메일 형식에 맞게 입력해주세요.\");\r\n        this.joinEmail.value = \"\";\r\n        this.joinEmail.focus();\r\n        return;\r\n      } else if (joinName === \"\" || joinName === undefined) {\r\n        alert(\"이름을 입력해주세요.\");\r\n        this.joinName.focus();\r\n        return;\r\n      } else if (joinPw === \"\" || joinPw === undefined) {\r\n        alert(\"비밀번호를 입력해주세요.\");\r\n        this.joinPw.focus();\r\n        return;\r\n      } else if (\r\n        joinPw.match(regExp2) === null ||\r\n        joinPw.match(regExp2) === undefined\r\n      ) {\r\n        alert(\"비밀번호를 숫자와 문자, 특수문자 포함 8~16자리로 입력해주세요.\");\r\n        this.joinPw.value = \"\";\r\n        this.joinPw.focus();\r\n        return;\r\n      }\r\n  \r\n      const send_param = {\r\n        headers,\r\n        email: this.joinEmail.value,\r\n        name: this.joinName.value,\r\n        password: this.joinPw.value\r\n      };\r\n      axios\r\n        .post(\"http://localhost:8080/member/join\", send_param)\r\n        //정상 수행\r\n        .then(returnData => {\r\n          if (returnData.data.message) {\r\n            alert(returnData.data.message);\r\n            //이메일 중복 체크\r\n            if (returnData.data.dupYn === \"1\") {\r\n              this.joinEmail.value = \"\";\r\n              this.joinEmail.focus();\r\n            } else {\r\n              this.joinEmail.value = \"\";\r\n              this.joinName.value = \"\";\r\n              this.joinPw.value = \"\";\r\n            }\r\n          } else {\r\n            alert(\"회원가입 실패\");\r\n          }\r\n        })\r\n        //에러\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    };\r\n    login = () => {\r\n      const loginEmail = this.loginEmail.value;\r\n      const loginPw = this.loginPw.value;\r\n  \r\n      if (loginEmail === \"\" || loginEmail === undefined) {\r\n        alert(\"이메일 주소를 입력해주세요.\");\r\n        this.loginEmail.focus();\r\n        return;\r\n      } else if (loginPw === \"\" || loginPw === undefined) {\r\n        alert(\"비밀번호를 입력해주세요.\");\r\n        this.loginPw.focus();\r\n        return;\r\n      }\r\n  \r\n      const send_param = {\r\n        headers,\r\n        email: this.loginEmail.value,\r\n        password: this.loginPw.value\r\n      };\r\n      axios\r\n        .post(\"http://localhost:8080/member/login\", send_param)\r\n        //정상 수행\r\n        .then(returnData => {\r\n          if (returnData.data.message) {\r\n            // console.log(\"login_id:\" + returnData.data._id);\r\n            $.cookie(\"login_id\", returnData.data._id, { expires: 1 });\r\n            $.cookie(\"login_email\", returnData.data.email, { expires: 1 });\r\n            alert(returnData.data.message);\r\n            window.location.href=\"/\";\r\n          } else {\r\n            alert(returnData.data.message);\r\n          }\r\n        })\r\n        //에러\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n      const formStyle = {\r\n        margin: 50\r\n      };\r\n      const buttonStyle = {\r\n        marginTop: 10\r\n      };\r\n  \r\n      return (\r\n        <Form style={formStyle}>\r\n          <Form.Group controlId=\"joinForm\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              maxLength=\"100\"\r\n              ref={ref => (this.joinEmail = ref)}\r\n              placeholder=\"Enter email\"\r\n            />\r\n            <Form.Text className=\"text-muted\">\r\n              We'll never share your email with anyone else.\r\n            </Form.Text>\r\n            <Form.Label>name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              maxLength=\"20\"\r\n              ref={ref => (this.joinName = ref)}\r\n              placeholder=\"name\"\r\n            />\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              maxLength=\"64\"\r\n              ref={ref => (this.joinPw = ref)}\r\n              placeholder=\"Password\"\r\n            />\r\n            <Button\r\n              style={buttonStyle}\r\n              onClick={this.join}\r\n              variant=\"primary\"\r\n              type=\"button\"\r\n              block\r\n            >\r\n              회원가입\r\n            </Button>\r\n          </Form.Group>\r\n  \r\n          <Form.Group controlId=\"loginForm\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              maxLength=\"100\"\r\n              ref={ref => (this.loginEmail = ref)}\r\n              placeholder=\"Enter email\"\r\n            />\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              maxLength=\"20\"\r\n              ref={ref => (this.loginPw = ref)}\r\n              placeholder=\"Password\"\r\n            />\r\n            <ReCaptcha\r\n              sitekey=\"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\"\r\n              action=\"login\"\r\n              verifyCallback={this.verifyCallback}\r\n            />\r\n            <Button\r\n              style={buttonStyle}\r\n              onClick={this.login}\r\n              variant=\"primary\"\r\n              type=\"button\"\r\n              block\r\n            >\r\n              로그인\r\n              \r\n            </Button>\r\n          </Form.Group>\r\n        </Form>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default LoginForm;","C:\\취준\\리액트연습\\cpu\\src\\MypageForm.jsx",["74"],"import React,  {Component} from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport $ from \"jquery\";\r\nimport {} from \"jquery.cookie\";\r\naxios.defaults.withCredentials = true;\r\nconst headers = { withCredentials: true };\r\n\r\n\r\nclass MypageForm extends Component {\r\nrender()  {\r\n  const divStyle = {\r\n    margin: 50\r\n  };\r\n  const marginBottom = {\r\n    marginBottom : 5\r\n  };\r\n  return (\r\n    <>\r\n      <div style={divStyle}>\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label>email</Form.Label>\r\n        <Form.Control type=\"email\" disabled value={$.cookie(\"login_email\")}/>\r\n        <Form.Label>name</Form.Label>\r\n        <Form.Control type=\"text\" placeholder=\"Enter email\" />\r\n        <Form.Label>password</Form.Label>\r\n        <Form.Control type=\"password\" placeholder=\"Enter password\" />\r\n        <Form.Label>new password</Form.Label>\r\n        <Form.Control type=\"password\" placeholder=\"Enter New Password\" />\r\n        <Form.Label>new password check</Form.Label>\r\n        <Form.Control type=\"password\" placeholder=\"Enter New Password Check\" />\r\n      </Form.Group>\r\n      <Button variant=\"primary\"  block style={marginBottom}>\r\n      회원정보 수정\r\n      </Button>\r\n      <Button variant=\"primary\" block>\r\n      회원 탈퇴\r\n      </Button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n}\r\nexport default MypageForm;","C:\\취준\\리액트연습\\cpu\\src\\Header.jsx",["75","76","77"],"\r\nimport React, { Component }  from \"react\";\r\nimport { Navbar, Button, Image, Nav, Form, FormControl } from \"react-bootstrap\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport $ from \"jquery\";\r\nimport {} from \"jquery.cookie\";\r\nimport { withRouter } from 'react-router-dom';\r\n\r\naxios.defaults.withCredentials = true;\r\nconst headers = { withCredentials: true };\r\n\r\nclass Header extends Component {\r\n\r\n  state = {\r\n    yesjoin: \"none\",\r\n    notjoin : \"none\"\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n\r\n    if ($.cookie(\"login_id\")) {\r\n      this.setState({\r\n        yesjoin: \"block\",\r\n        notjoin: \"none\"\r\n      });\r\n      \r\n      }\r\n      \r\n    else {\r\n      this.setState({\r\n        yesjoin: \"none\",\r\n        notjoin:\"block\"\r\n      });\r\n    }\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\n  logout = () => {\r\n    axios\r\n      .get(\"http://localhost:8080/member/logout\", {\r\n        headers\r\n      })\r\n      .then(returnData => {\r\n        if (returnData.data.message) {\r\n          $.removeCookie(\"login_id\");\r\n          alert(\"로그아웃 되었습니다!\");\r\n          this.props.history.push('/');\r\n            window.location.reload();\r\n        }\r\n      });\r\n  };\r\n\r\n  conform = () => {\r\n    if($.cookie(\"login_id\")){\r\n      this.props.history.push('/boardform');\r\n    }\r\n     else {\r\n       alert(\"로그인을 해주세요!\");\r\n       this.props.history.push('/loginform');\r\n   }  \r\n   }\r\n\r\n  render() {\r\n    \r\n    const loginstyle = {\r\n      margin: \"0px 5px 0px 10px\",\r\n      display: this.state.notjoin\r\n    };\r\n\r\n    const logoutstyle  = {\r\n      margin: \"0px 5px 0px 10px\",\r\n      display: this.state.yesjoin\r\n\r\n    };\r\n\r\n    return (\r\n     <div>\r\n        <>\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Navbar.Brand>\r\n            <Nav.Link href=\"/\">\r\n            CPU HOMEPAGE\r\n            </Nav.Link>\r\n            </Navbar.Brand>\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link onClick={this.conform}>\r\n                내글목록\r\n            </Nav.Link>\r\n            <Nav.Link href=\"/allboard\">\r\n               전체글목록\r\n            </Nav.Link>\r\n            <Nav.Link href=\"/mypage\">\r\n              마이페이지\r\n            </Nav.Link>\r\n          \r\n          </Nav>\r\n          <Form inline>\r\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n            <Button variant=\"outline-info\">Search</Button>\r\n          </Form>\r\n          <NavLink to=\"/loginForm\">   \r\n            <Button style={loginstyle} variant=\"success\">\r\n              로그인\r\n            </Button>\r\n            <Button style={logoutstyle} onClick={this.logout} variant=\"secondary\">\r\n              로그아웃\r\n            </Button>\r\n          </NavLink>   \r\n        </Navbar>\r\n        \r\n      </>    \r\n      <img src=\"./img/banner.jpg\" />  \r\n       </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Header);","C:\\취준\\리액트연습\\cpu\\src\\Body.jsx",["78"],"import React, { Component } from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport BoardForm from \"./BoardForm\";\r\n\r\nimport Home from \"./Home\";\r\nimport { Route } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport {} from \"jquery.cookie\";\r\n\r\nclass Body extends Component {\r\n \r\n\r\n   \r\n  render() {\r\n    let resultForm;\r\n   \r\n    function getResultForm() {\r\n      // console.log($.cookie(\"login_id\"));\r\n      if ($.cookie(\"login_id\")) {\r\n        resultForm = <Route path=\"/\" exact={true} component={Home}></Route>;\r\n        return resultForm;\r\n     } else {\r\n        resultForm = <Route path=\"/\" component={LoginForm}></Route>;\r\n        return resultForm;\r\n      }\r\n    }\r\n    getResultForm();\r\n    return (\r\n      <div>\r\n        {resultForm}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;","C:\\취준\\리액트연습\\cpu\\src\\Footer.jsx",[],"C:\\취준\\리액트연습\\cpu\\src\\App.jsx",["79"],"import React from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Body from \"./Body\";\r\nimport Footer from \"./Footer\";\r\nimport BoardWriteForm from \"./BoardWriteForm\";\r\nimport BoardDetail from \"./BoardDetail\";\r\nimport MypageForm from \"./MypageForm\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport BoardForm from \"./BoardForm\";\r\nimport BoardAllForm from \"./BoardAllForm\";\r\nimport Home from \"./Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n    <Header/>\r\n    <Footer/>\r\n    <Route path=\"/\" exact={true} component={Home} />\r\n    <Route path=\"/boardform\"  component={BoardForm} />\r\n    <Route path=\"/mypage\" component={MypageForm} />\r\n    <Route path=\"/board/detail\" component={BoardDetail}/>\r\n    <Route path=\"/loginform\" component={LoginForm}/>\r\n    <Route path=\"/boardWrite\" component={BoardWriteForm}/>\r\n    <Route path=\"/allboard\" component={BoardAllForm}/>\r\n    \r\n  </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\취준\\리액트연습\\cpu\\src\\BoardAllForm.jsx",[],{"ruleId":"80","severity":1,"message":"81","line":3,"column":9,"nodeType":"82","messageId":"83","endLine":3,"endColumn":19},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"80","severity":1,"message":"88","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":16},{"ruleId":"80","severity":1,"message":"89","line":2,"column":18,"nodeType":"82","messageId":"83","endLine":2,"endColumn":24},{"ruleId":"80","severity":1,"message":"90","line":2,"column":26,"nodeType":"82","messageId":"83","endLine":2,"endColumn":31},{"ruleId":"80","severity":1,"message":"91","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":17},{"ruleId":"80","severity":1,"message":"92","line":3,"column":19,"nodeType":"82","messageId":"83","endLine":3,"endColumn":24},{"ruleId":"80","severity":1,"message":"93","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":9},{"ruleId":"80","severity":1,"message":"94","line":7,"column":8,"nodeType":"82","messageId":"83","endLine":7,"endColumn":17},{"ruleId":"80","severity":1,"message":"95","line":9,"column":7,"nodeType":"82","messageId":"83","endLine":9,"endColumn":14},{"ruleId":"84","replacedBy":"96"},{"ruleId":"86","replacedBy":"97"},{"ruleId":"80","severity":1,"message":"92","line":3,"column":9,"nodeType":"82","messageId":"83","endLine":3,"endColumn":14},{"ruleId":"80","severity":1,"message":"98","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":12},{"ruleId":"80","severity":1,"message":"95","line":7,"column":7,"nodeType":"82","messageId":"83","endLine":7,"endColumn":14},{"ruleId":"80","severity":1,"message":"90","line":3,"column":26,"nodeType":"82","messageId":"83","endLine":3,"endColumn":31},{"ruleId":"80","severity":1,"message":"99","line":4,"column":19,"nodeType":"82","messageId":"83","endLine":4,"endColumn":23},{"ruleId":"100","severity":1,"message":"101","line":117,"column":7,"nodeType":"102","endLine":117,"endColumn":37},{"ruleId":"80","severity":1,"message":"103","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":17},{"ruleId":"80","severity":1,"message":"104","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":12},"no-unused-vars","'HashRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["105"],"no-negated-in-lhs",["106"],"'Navbar' is defined but never used.","'Button' is defined but never used.","'Image' is defined but never used.","'NavLink' is defined but never used.","'Route' is defined but never used.","'$' is defined but never used.","'LoginForm' is defined but never used.","'headers' is assigned a value but never used.",["105"],["106"],"'Home' is defined but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'BoardForm' is defined but never used.","'Body' is defined but never used.","no-global-assign","no-unsafe-negation"]